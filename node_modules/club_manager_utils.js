// Export custom object utilities module

// Dependencies
var async = require('async');

function clubManagerUtils(){}

// Add new custom object type
// cos = pencilblue custom object service
// util = pencilblue utilities
// objectName: Custom object database name
// objectFields: Custom object fields 
// cb = callback(error, boolean)
clubManagerUtils.createCustomObjectType = function(	cos, util, objectName, 
																										objectFields, cb) {
	// Check if custom type already exists.
	cos.loadTypeByName(objectName, function(err, objectType) {
		if(util.isError(err)) {
			return cb(err, false);
		}
		else if(!util.isNullOrUndefined(objectType)) {
			return cb(new Error(objectName + ' object already exists.'), false);
		}

		// Create new custom object type
		cos.saveType(objectFields, function(err, result) {
			return cb(err, !util.isError(err));
		});
	});
};

// Clear custom objects from database and remove custom object type
// cos = pencilblue custom object service
// util = pencilblue utilities
// objectName: Custom object database name
// cb = callback(error, boolean)
clubManagerUtils.removeCustomObjectType = function(cos, util, objectName, cb) {
	// Get object type
	cos.loadTypeByName(objectName, function(err, objectType) {
		// If object does not exists there is nothing to do.
		// Return error if there was any.
		if(util.isNullOrUndefined(objectType) || util.isError(err)) {
			return cb(err, !util.isError(err));
		}
	
		// Clear custom objects from database, then delete custom object type
		async.series([
			function deleteCustomObjects(cb) {
				cos.deleteForType(objectType, function(err, result) {
					return cb(err);
				});
			},
			function deleteCustomObjectType(cb) {
				cos.deleteTypeById(objectType._id.toString(), function(err) {
					return cb(err);
				});
			}], cb
		);
	});
};

// Query all custom objects of given type from database.
// cos = pencilblue custom object service
// util = pencilblue utilities
// objectName: Custom ojbject database name
// selection: Which fields are incldued in the results
// cb = callback(error, data)
clubManagerUtils.queryCustomObjects = function(	cos, util, objectName, 
																								selection, cb) {
	// Get custom object type id and use it to find all custom objects,
	// finally call cb
	async.waterfall([
		function getCustomObjectTypeId(cb) {
			cos.loadTypeByName(objectName, function(err, objectType) {
				if(util.isError(err) || util.isNullOrUndefined(objectType)) {
					return cb(err, null);
				}
				
				return cb(err, objectType._id);
			});
		},
		function getCustomObjects(typeId, cb) {
			cos.findByType(	typeId.toString(), {select: selection}, 
											function(err, results) {
				return cb(err, results);
			});
		}], cb
	);
};

clubManagerUtils.getCustomObjectTypeId = function(cos, util, objectName, cb) {
  cos.loadTypeByName(objectName, function(err, objectType) {
    if(util.isError(err) || util.isNullOrUndefined(objectType)) {
      return cb(err, null);
    }
      
    return cb(err, objectType._id);
  });
};

module.exports = clubManagerUtils;
